y = tolower(x)
return(y)
# result
}
# lower case using try.error with sapply
game_txt = sapply(game_txt, try.error)
# remove NAs in game_txt
game_txt = game_txt[!is.na(game_txt)]
names(game_txt) = NULL
game_txt <- game_txt[ ! duplicated( game_txt ) ]
# Perform Sentiment Analysis
# classify emotion
class_emo = classify_emotion(game_txt, algorithm='bayes', prior=1.0)
# get emotion best fit
emotion = class_emo[,7]
# substitute NA's by 'unknown'
emotion[is.na(emotion)] = 'unknown'
# classify polarity
class_pol = classify_polarity(game_txt, algorithm='bayes')
# get polarity best fit
polarity = class_pol[,4]
# Create data frame with the results and obtain some general statistics
# data frame with results
sent_df = data.frame(text=game_txt, emotion=emotion,
polarity=polarity, stringsAsFactors=FALSE)
# sort data frame
sent_df = within(sent_df,
emotion <- factor(emotion, levels=names(sort(table(emotion), decreasing=TRUE))))
write.csv(sent_df, file = "GameTweets.csv")
# Letâ€™s do some plots of the obtained results
# plot distribution of emotions
ggplot(sent_df, aes(x=emotion)) +
geom_bar(aes(y=..count.., fill=emotion)) +
scale_fill_brewer(palette='Dark2') +
labs(x='emotion categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets about Call of Duty: Infinite Warfare\n(classification by emotion)') +
theme(plot.title = element_text(size=12, face='bold'))
ggplot(sent_df, aes(x=polarity)) +
geom_bar(aes(y=..count.., fill=polarity)) +
scale_fill_brewer(palette='RdGy') +
labs(x='polarity categories', y='number of tweets') +
ggtitle('Sentiment Analysis of Tweets about Call of Duty: Infinite Warfare\n(classification by polarity)') +
theme(plot.title = element_text(size=12, face='bold'))
write.csv(sent_df, file = "gameTweets.csv")
# Separate the text by emotions and visualize the words with a comparison cloud
# separating text by emotion
emos = levels(factor(sent_df$emotion))
nemo = length(emos)
emo.docs = rep('', nemo)
for (i in 1:nemo)
{
tmp = game_txt[emotion == emos[i]]
emo.docs[i] = paste(tmp, collapse='')
}
# remove stopwords
emo.docs = removeWords(emo.docs, stopwords('english'))
# create corpus
corpus = Corpus(VectorSource(emo.docs))
tdm = TermDocumentMatrix(corpus)
# comparison word cloud
col=brewer.pal(6,"Dark2")
wordcloud(tdm, min.freq=25, scale=c(5,2),rot.per = 0.25,
random.color=T, max.word=45, random.order=F,colors=col)
r java()
rjava()
rjava()
system.file("jri", package="rJava")
System.out.println(System.getProperty("java.library.path"));
export R_HOME=/usr/lib64/R
export R_HOME=/usr/lib64/R
R.home()
export CLASSPATH=.:/usr/lib/R/site-library/rJava/jri/
usr@srv $ export R_HOME=/usr/lib64/R
usr@srv $ netbeans
system.file("jri", package="rJava")
install.packages("rJava")
install.packages("rJava")
install.packages("rServe")
install.packages("Rserve")
library(Rserve)
Rserve()
Rserve('--no-save')
install.packages(Rserve)
install.packages("Rserve")
libaray("Rserve")
library("Rserve")
Rserve()
Rserve(args="--no-save")
quit()
library("Rserve")
Rserve(args="--no-save")
install.packages("HistogramTools")
library(HistogramTools)
deathCounts <- c(565, 116, 69, 78, 319, 501, 633, 655, 848, 1226, 1633, 2459, 3375, 4669, 6152, 7436, 9526, 12619, 12455, 7113, 2104, 241)
ageBreaks <- c(0, 1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100, 110)
myhist <- PreBinnedHistogram(
breaks = ageBreaks,
counts = deathCounts,
xname = "Age at Death of Australian Males, 2012")
plot(myhist)
plot(myhist, col="red")
setwd("/Users/declanbarnes/Documents/FinalYearProject/DataSets/")
library(HistogramTools)
library(RMySQL)
library(DBI)
library(stats)
library(C50)
library(ggmap)
library(ggplot2)
library(gmodels)
library(googleVis)
library(knitr)
library(plotly)
library(tidyr)
library(caret)
library(dplyr)
library(lattice)
library(plyr)
library(rworldmap)
library(plotly)
library(grid)
centres <- read.csv("healthcentres.csv", header=TRUE)
leinster <- subset(centres, County =="Wicklow" | County =="Wexford" | County =="Dublin" | County =="Kildare"
| County =="Meath" | County =="Carlow" | County =="Kilkenny"
| County =="Laois" | County =="Offaly" | County =="Westmeath"
| County =="Longford" | County =="Louth")
data = data.frame(
ID = as.numeric(leinster$ID),
longitude = as.numeric(leinster$long_xcord),
latitude = as.numeric(leinster$lat_ycord)
)
make_circles <- function(centers, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centers$latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centers$ID, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centers$longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centers$latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
island <- get_map(location = c(lon = mean(leinster$long_xcord), lat = mean(leinster$lat_ycord)), zoom = 8,
source="google",maptype="roadmap")
islandMap <- ggmap(island)
RL = geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = lon, y = lat, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
setwd("/Users/declanbarnes/Documents/FinalYearProject/DataSets/")
library(HistogramTools)
library(RMySQL)
library(DBI)
library(stats)
library(C50)
library(ggmap)
library(ggplot2)
library(gmodels)
library(googleVis)
library(knitr)
library(plotly)
library(tidyr)
library(caret)
library(dplyr)
library(lattice)
library(plyr)
library(rworldmap)
library(plotly)
library(grid)
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.leinster;")
centres <- fetch(query, n=1822)
View(centres)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
leinster <- subset(centres, County =="Wicklow" | County =="Wexford" | County =="Dublin" | County =="Kildare"
| County =="Meath" | County =="Carlow" | County =="Kilkenny"
| County =="Laois" | County =="Offaly" | County =="Westmeath"
| County =="Longford" | County =="Louth")
View(centres)
data = data.frame(
ID = as.numeric(centres$ID),
longitude = as.numeric(centres$long_xcord),
latitude = as.numeric(centres$lat_ycord)
)
make_circles <- function(centers, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centers$latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centers$ID, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centers$longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centers$latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
island <- get_map(location = c(lon = mean(centres$long_xcord), lat = mean(centres$lat_ycord)), zoom = 8,
source="google",maptype="roadmap")
View(myCircles)
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.centres;")
query <- dbSendQuery(con, "Select * From disabilitydb.leinster;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
data = data.frame(
ID = as.numeric(centres$ID),
longitude = as.numeric(centres$long_xcord),
latitude = as.numeric(centres$lat_ycord)
)
make_circles <- function(centers, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centers$latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centers$id, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centers$Longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centers$Latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
island <- get_map(location = c(lon = mean(centres$Longitude), lat = mean(centres$Latitude)), zoom = 8,
source="google",maptype="roadmap")
islandMap <- ggmap(island)
RL = geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = lon, y = lat, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = Longitude, y = Latitude, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
RL = geom_point(aes(x = Longitude, y = Latitude), data = data, color = "#ff0000")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = Longitude, y = Latitude, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.leinster;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
data = data.frame(
ID = as.numeric(centres$ID),
longitude = as.numeric(centers$Longitude),
latitude = as.numeric(centers$Latitude)
)
data = data.frame(
ID = as.numeric(centres$ID),
longitude = as.numeric(centres$Longitude),
latitude = as.numeric(centres$Latitude)
)
data = data.frame(
ID = as.numeric(centres$id),
longitude = as.numeric(centres$Longitude),
latitude = as.numeric(centres$Latitude)
)
make_circles <- function(centers, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centers$latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centers$id, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centers$Longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centers$Latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
island <- get_map(location = c(lon = mean(centres$Longitude), lat = mean(centres$Latitude)), zoom = 8,
source="google",maptype="roadmap")
islandMap <- ggmap(island)
RL = geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = longitude, y = latitude, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = lon, y = lat, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
View(data)
make_circles <- function(centres, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centres$Latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centres$id, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centers$Longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centers$Latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
make_circles <- function(centres, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centres$Latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centres$id, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centres$Longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centres$Latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.leinster;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
centres <- subset(centres, County =="Wicklow" | County =="Wexford" | County =="Dublin" | County =="Kildare"
| County =="Meath" | County =="Carlow" | County =="Kilkenny"
| County =="Laois" | County =="Offaly" | County =="Westmeath"
| County =="Longford" | County =="Louth")
data = data.frame(
ID = as.numeric(centres$id),
longitude = as.numeric(centres$Longitude),
latitude = as.numeric(centres$Latitude)
)
make_circles <- function(centers, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centres$Latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centers$id, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centers$Longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centers$Latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
island <- get_map(location = c(lon = mean(centres$Longitude), lat = mean(centres$Latitude)), zoom = 8,
source="google",maptype="roadmap")
islandMap <- ggmap(island)
RL = geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = longitude, y = latitude, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = Longitude, y = Latitude, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = centres$Longitude, y = centres$Latitude, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = centres$Longitude, y = centres$Latitude, group = id), data = myCircles, size = 10, shape = 1,  color = "darkblue")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = centres$Longitude, y = centres$Latitude, group = centres$id), data = myCircles, size = 10, shape = 1,  color = "darkblue")
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.leinster;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.leinster;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
centres <- subset(centres, Area =="Wicklow" | Area =="Wexford" | Area =="Dublin" | Area =="Kildare"
| Area =="Meath" | Area =="Carlow" | Area =="Kilkenny"
| Area =="Laois" | Area =="Offaly" | Area =="Westmeath"
| Area =="Longford" | Area =="Louth")
View(centres)
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.healthcentres;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
centres <- subset(centres, Area =="Wicklow" | Area =="Wexford" | Area =="Dublin" | Area =="Kildare"
| Area =="Meath" | Area =="Carlow" | Area =="Kilkenny"
| Area =="Laois" | Area =="Offaly" | Area =="Westmeath"
| Area =="Longford" | Area =="Louth")
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.healthcentres;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
centres <- subset(centres, Coun =="Wicklow" | County =="Wexford" | County =="Dublin" | County =="Kildare"
| County =="Meath" | County =="Carlow" | County =="Kilkenny"
| County =="Laois" | County =="Offaly" | County =="Westmeath"
| County =="Longford" | County =="Louth")
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.healthcentres;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
centres <- subset(centres, County =="Wicklow" | County =="Wexford" | County =="Dublin" | County =="Kildare"
| County =="Meath" | County =="Carlow" | County =="Kilkenny"
| County =="Laois" | County =="Offaly" | County =="Westmeath"
| County =="Longford" | County =="Louth")
data = data.frame(
ID = as.numeric(centres$id),
longitude = as.numeric(centres$Longitude),
latitude = as.numeric(centres$Latitude)
)
View(data)
View(centres)
View(centres)
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.healthcentres;")
data <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(data)
data
leinster <- subset(centres, County =="Wicklow" | County =="Wexford" | County =="Dublin" | County =="Kildare"
| County =="Meath" | County =="Carlow" | County =="Kilkenny"
| County =="Laois" | County =="Offaly" | County =="Westmeath"
| County =="Longford" | County =="Louth")
data = data.frame(
ID = as.numeric(leinster$ID),
longitude = as.numeric(leinster$long_xcord),
latitude = as.numeric(leinster$lat_ycord)
)
con <- dbConnect(MySQL(), user="disabilitydb", password="disability1989_", dbname="disabilitydb", host="mysql3.gear.host")
query <- dbSendQuery(con, "Select * From disabilitydb.healthcentres;")
centres <- fetch(query, n=1822)
isFinished <- dbHasCompleted(query)
data.frame(centres)
centres
leinster <- subset(centres, County =="Wicklow" | County =="Wexford" | County =="Dublin" | County =="Kildare"
| County =="Meath" | County =="Carlow" | County =="Kilkenny"
| County =="Laois" | County =="Offaly" | County =="Westmeath"
| County =="Longford" | County =="Louth")
data = data.frame(
ID = as.numeric(leinster$ID),
longitude = as.numeric(leinster$long_xcord),
latitude = as.numeric(leinster$lat_ycord)
)
View(leinster)
data = data.frame(
ID = as.numeric(leinster$healthcentre_id),
longitude = as.numeric(leinster$long_xcord),
latitude = as.numeric(leinster$lat_ycord)
)
make_circles <- function(centers, radius, nPoints = 100){
# centers: the data frame of centers with ID
# radius: radius measured in kilometer
#
meanLat <- mean(centers$latitude)
# length per longitude changes with lattitude, so need correction
radiusLon <- radius /111 / cos(meanLat/57.3)
radiusLat <- radius / 111
circleDF <- data.frame(ID = rep(centers$ID, each = nPoints))
angle <- seq(0,2*pi,length.out = nPoints)
circleDF$lon <- unlist(lapply(centers$longitude, function(x) x + radiusLon * cos(angle)))
circleDF$lat <- unlist(lapply(centers$latitude, function(x) x + radiusLat * sin(angle)))
return(circleDF)
}
myCircles <- make_circles(data, 0.1)
island <- get_map(location = c(lon = mean(leinster$long_xcord), lat = mean(leinster$lat_ycord)), zoom = 8,
source="google",maptype="roadmap")
islandMap <- ggmap(island)
RL = geom_point(aes(x = longitude, y = latitude), data = data, color = "#ff0000")
islandMap + RL +
scale_x_continuous(limits = c(-8.5, -5), expand = c(0, 0)) +
scale_y_continuous(limits = c(52.1, 54.2), expand = c(0, 0)) +
########### add circles
geom_point(aes(x = lon, y = lat, group = ID), data = myCircles, size = 10, shape = 1,  color = "darkblue")
